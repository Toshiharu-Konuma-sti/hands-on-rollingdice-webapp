import com.github.spotbugs.snom.SpotBugsTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.cyclonedx.bom' version '2.3.1'
	id 'jacoco'
	id 'com.github.spotbugs' version '6.4.2'
	id 'pmd'
	id 'checkstyle'
}

group = 'jp.sios'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

allprojects {
	repositories {
		all { repo ->
			if (repo instanceof MavenArtifactRepository && repo.url.toString().startsWith('http://')) {
				println "Allowing insecure protocol for repository: ${repo.url}"
				repo.allowInsecureProtocol = true
			}
		}
		mavenCentral()
	}
}

dependencies {

	// fundamental libraries necessary to run the environment of Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// libraries for Metrics in OpenTelemetry (using both OpenTelemetry and Prometheus protocol)
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'io.micrometer:micrometer-registry-otlp'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// library for Metrics to enable an exemplar
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'

	// library for Logging and Tracing in OpenTelemetry
	implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter:2.12.0'

//	// library for pyroscope
//	implementation 'io.pyroscope:agent:0.18.0'

	// libraties necessary to connect to a database
	implementation 'com.mysql:mysql-connector-j:9.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

}

tasks.named('test') {
	useJUnitPlatform()
	jvmArgs '-Djava.security.egd=file:/dev/./urandom'
	testLogging {
		events "started", "passed", "skipped", "failed"
	}
}

jacoco {
	toolVersion = "0.8.13"
}

spotbugs {
	ignoreFailures = true
}

pmd {
	toolVersion = "7.17.0"
	ignoreFailures = true
	ruleSetFiles = files("${rootProject.projectDir}/config/pmd/pmd-ruleset.xml")
	sourceSets = [sourceSets.main, sourceSets.test]
}

checkstyle {
	toolVersion = "10.26.1"
	configFile = file("${rootProject.projectDir}/config/checkstyle/google_checks.xml")
	configProperties = [
		'org.checkstyle.google.suppressionfilter.config': "${rootProject.projectDir}/config/checkstyle/checkstyle-suppressions.xml"
	]
}

tasks.withType(JacocoReport) {
	reports {
		xml.required = true
		html.required = true
	}
}

tasks.withType(SpotBugsTask) {
	reports {
		xml.required = true
		html.required = true
	}
}

tasks.withType(Pmd) {
	reports {
		xml.required = true
		html.required = true
	}
}
